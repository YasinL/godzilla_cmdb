# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2019-01-30 16:29
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('roleid', models.CharField(default='', max_length=50, verbose_name='角色id')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ansible_group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostgroup', models.CharField(max_length=200, null=True)),
                ('ansible_groupid', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ansible_host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostip', models.GenericIPAddressField()),
                ('hostname', models.CharField(max_length=50, null=True)),
                ('hostport', models.CharField(max_length=50, null=True)),
                ('project_owner', models.CharField(max_length=50, null=True)),
                ('idc_name', models.CharField(max_length=50, null=True)),
                ('ansible_groupid', models.CharField(max_length=20, null=True)),
                ('spaceid', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='compile_conf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('varnameid', models.CharField(max_length=50)),
                ('varname', models.CharField(max_length=50)),
                ('varpath', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='grayphone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=11)),
                ('expirytime', models.CharField(max_length=30, null=True)),
                ('phoneencrypt', models.CharField(max_length=150, null=True)),
                ('online', models.CharField(max_length=10)),
                ('createuser', models.CharField(max_length=30)),
                ('createtime', models.CharField(max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='hostspace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spaceid', models.CharField(max_length=20, null=True)),
                ('spacename', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='memuid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submemuname', models.CharField(max_length=50, null=True)),
                ('submemuurl', models.CharField(max_length=50, null=True)),
                ('memunameid', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='memulist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_url', models.CharField(max_length=50, null=True)),
                ('memuname', models.CharField(max_length=10, null=True)),
                ('memunameid', models.CharField(max_length=10, null=True)),
                ('permission_id', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_id', models.CharField(max_length=10, null=True)),
                ('roleid', models.CharField(max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecordLogTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('recordclass', models.CharField(max_length=150)),
                ('recordvalue', models.TextField(max_length=10000)),
                ('logtime', models.DateTimeField(default='2019-01-30 16:29:41')),
            ],
        ),
        migrations.CreateModel(
            name='RedisHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proxy_name', models.CharField(max_length=50, null=True)),
                ('redis_ip', models.GenericIPAddressField()),
                ('redis_port', models.CharField(max_length=20)),
                ('admin_addr', models.GenericIPAddressField(null=True)),
                ('admin_port', models.CharField(max_length=20, null=True)),
                ('redis_pass', models.CharField(max_length=50, null=True)),
                ('project_owner', models.CharField(max_length=50, null=True)),
                ('project_principal', models.CharField(max_length=20, null=True)),
                ('typename', models.CharField(max_length=20, null=True)),
                ('typeid', models.CharField(max_length=1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roleid', models.CharField(max_length=10, null=True)),
                ('Rolename', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='tenginehost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.GenericIPAddressField()),
                ('hostredisport', models.CharField(max_length=10, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
